/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EstadoSistemaForm.java
 *
 * Created on 07/04/2010, 20:44:21
 */

package org.jredfoot.utgrid.node.charts;

import java.util.Date;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hyperic.sigar.SigarException;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.NumberTickUnit;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.Range;
import org.jfree.data.xy.XYSeries;
import org.jredfoot.utgrid.node.statistics.SigarCpuInfo;

/**
 *
 * @author marcelo
 */
public class SigarCpuInfoChart extends javax.swing.JFrame {
    XYSeries xySeries = null;
    XYSeries xySeries2 = null;
    int contador = 0;
    Timer timer;
    final ChartPanel chartPanel;
    SigarCpuInfo cpu;
    JFreeChart chart;
    private final int cpuId;

    /** Creates new form EstadoSistemaForm */
    public SigarCpuInfoChart(int cpuId) {
        initComponents();

        this.cpuId = cpuId;

        try {
             cpu = new SigarCpuInfo(cpuId);

            cpu.atualizarCpus();

        } catch (Exception e) {
            e.printStackTrace();
        }


        chart = ChartFactory.createXYLineChart(
                "Gráfico de Uso do Processador " + (cpuId + 1) ,
                "Decurso de Tempo (seg.)",
                "Percentuais",
                SigarCpuInfo.collection1 ,
                PlotOrientation.VERTICAL,
                true,
                true,
                false
        );


        XYPlot xyp = chart.getXYPlot();

        NumberAxis axis = (NumberAxis)xyp.getRangeAxis();

        axis.setAutoRange(false);

        axis.setRange(0.0, 100.0);

        axis.setTickUnit(new NumberTickUnit(10));

        axis = (NumberAxis)xyp.getDomainAxis();

        axis.setRange( new Range( 0.0, 100.0), true, true );

        axis.setTickUnit(new NumberTickUnit(10));

        //axis.setR

        chartPanel = new ChartPanel(chart);

        chartPanel.setPreferredSize(new java.awt.Dimension(250,300));
        
        setContentPane(chartPanel);

        timer = new Timer();

        timer.schedule(new AtualizaGrafico(), new Date(), 1000);
        

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 520, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 328, Short.MAX_VALUE)
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-520)/2, (screenSize.height-350)/2, 520, 350);
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                SigarCpuInfoChart esf = new SigarCpuInfoChart(0);
                esf.setVisible(true);
                SigarCpuInfoChart esf2 = new SigarCpuInfoChart(1);
                esf2.setVisible(true);
            }
        });
    }

    public void atualizar(){
        try {
            cpu.atualizarCpus();
            XYPlot xyp = chart.getXYPlot();
            NumberAxis axis = (NumberAxis)xyp.getDomainAxis();
            axis.setRange( new Range( SigarCpuInfo.contador - 100, SigarCpuInfo.contador), true, true );
            chartPanel.revalidate();
            chartPanel.repaint();
        } catch (SigarException ex) {
            Logger.getLogger(SigarCpuInfoChart.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    class AtualizaGrafico extends TimerTask {

        @Override
        public void run() {
            atualizar();
        }

    }

}
